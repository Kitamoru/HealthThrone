import React, { useEffect, useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useAppContext } from '@/context/UserContext';
import { Loader } from '@/components/Loader';
import { Sprite } from '@/lib/types';

export default function Shop() {
  const router = useRouter();
  const { user, sprites, ownedSprites, coins, isLoading, error, updateUser } = useAppContext();
  const [currentSprite, setCurrentSprite] = useState<number | null>(null);

  useEffect(() => {
    if (user && user.current_sprite_id !== undefined) {
      setCurrentSprite(user.current_sprite_id);
    }
  }, [user]);

  const handlePurchase = async (spriteId: number) => {
    if (!user?.id) {
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
      return;
    }

    if (ownedSprites.includes(spriteId)) {
      alert('–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç —Å–ø—Ä–∞–π—Ç!');
      return;
    }

    const sprite = sprites.find((s) => s.id === spriteId);
    if (!sprite) {
      alert('–¢–∞–∫–æ–π —Å–ø—Ä–∞–π—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
      return;
    }

    if (coins < sprite.price) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
      return;
    }

    try {
      const response = await updateUser(user.id!, '', spriteId); // –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–æ–≤–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø—Ä–∞–π—Ç–∞

      if (response.success) {
        setCurrentSprite(spriteId);
        alert('–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!');
      } else {
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: ${response.error}`);
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  };

  const handleEquip = async (spriteId: number) => {
    if (!user?.id) {
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
      return;
    }

    try {
      const response = await updateUser(user.id!, '', spriteId); // –≠–∫–∏–ø–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø—Ä–∞–π—Ç

      if (response.success) {
        setCurrentSprite(spriteId);
        alert('–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
      } else {
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: ${response.error}`);
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  };

  if (isLoading) {
    return <Loader />;
  }

  return (
    <div className="container">
      <div className="scrollable-content">
        <div className="header">
          <h2>–ú–∞–≥–∞–∑–∏–Ω —Å–ø—Ä–∞–π—Ç–æ–≤</h2>
          <div className="coins-display">–ú–æ–Ω–µ—Ç—ã: {coins}</div>
        </div>

        {error && <div className="error">{error}</div>}

        {!user?.id ? (
          <div className="error">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
          </div>
        ) : sprites.length === 0 ? (
          <div className="info">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤.</div>
        ) : (
          <div className="sprites-grid">
            {sprites.map((sprite) => {
              const isOwned = ownedSprites.includes(sprite.id);
              const isEquipped = currentSprite === sprite.id;

              return (
                <div key={sprite.id} className="sprite-card">
                  <img
                    src={sprite.image_url}
                    alt={sprite.name}
                    className="sprite-image"
                    onError={(e) =>
                      (e.currentTarget.src =
                        'https://via.placeholder.com/150?text=No+Image')}
                  />
                  <div className="sprite-info">
                    <h3>{sprite.name}</h3>
                    <div className="sprite-price">
                      –¶–µ–Ω–∞:{' '}
                      {sprite.price > 0 ? `${sprite.price} –º–æ–Ω–µ—Ç` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
                    </div>
                    <div className="sprite-actions">
                      {!isOwned ? (
                        coins >= sprite.price ? (
                          <button
                            className="buy-btn"
                            onClick={() => handlePurchase(sprite.id)}>
                            –ö—É–ø–∏—Ç—å
                          </button>
                        ) : (
                          <button className="buy-btn disabled" disabled>
                            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                          </button>
                        )
                      ) : (
                        <button
                          className={`equip-btn ${isEquipped ? 'disabled' : ''}`}
                          onClick={() => handleEquip(sprite.id)}
                          disabled={isEquipped}>
                          {isEquipped ? '–ü—Ä–∏–º–µ–Ω—ë–Ω' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>

      <div className="menu">
        <Link href="/" passHref>
          <button className="menu-btn">üìä</button>
        </Link>
        <Link href="/friends" passHref>
          <button className="menu-btn">üìà</button>
        </Link>
        <Link href="/shop" passHref>
          <button className="menu-btn active">üõçÔ∏è</button>
        </Link>
        <Link href="/info" passHref>
          <button className="menu-btn">‚ÑπÔ∏è</button>
        </Link>
      </div>
    </div>
  );
}
