console.log("[Bot] TOKEN:", process.env.TOKEN ? "***" + process.env.TOKEN.slice(-5) : "MISSING");
console.log("[Bot] WEBAPPURL:", process.env.WEBAPPURL || "MISSING");
console.log("[Bot] WEBHOOKSECRETTOKEN:", process.env.WEBHOOKSECRETTOKEN ? "***" + process.env.WEBHOOKSECRETTOKEN.slice(-5) : "MISSING");

import { Telegraf, Markup } from 'telegraf';
import type { NextApiRequest, NextApiResponse } from 'next';
import crypto from 'crypto';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['TOKEN', 'WEBAPPURL', 'WEBHOOKSECRETTOKEN'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  const errorMessage = `Missing environment variables: ${missingVars.join(', ')}`;
  console.error(errorMessage);
  throw new Error(errorMessage);
}

const bot = new Telegraf(process.env.TOKEN!);
const webAppUrl = process.env.WEBAPPURL!;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –æ—à–∏–±–∫–∏
const getErrorDetails = (err: unknown) => {
  if (err instanceof Error) {
    return {
      message: err.message,
      stack: err.stack,
      raw: err
    };
  }
  return {
    message: String(err),
    stack: undefined,
    raw: err
  };
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
bot.catch((err, ctx) => {
  const errorDetails = getErrorDetails(err);
  
  console.error(`[BOT GLOBAL ERROR]`, {
    updateId: ctx.update.update_id,
    updateType: Object.keys(ctx.update).find(key => key !== 'update_id') || 'unknown',
    userId: ctx.from?.id,
    chatId: ctx.chat?.id,
    error: errorDetails
  });
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
bot.use((ctx, next) => {
  const updateType = Object.keys(ctx.update).find(key => key !== 'update_id') || 'unknown';
  const logInfo = {
    updateId: ctx.update.update_id,
    type: updateType,
    userId: ctx.from?.id,
    chatId: ctx.chat?.id,
    text: 'text' in ctx.update ? ctx.update.text : undefined
  };
  
  console.log('[INCOMING UPDATE]', logInfo);
  return next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
bot.command('start', async (ctx) => {
  try {
    console.log(`Handling /start for user: ${ctx.from.id}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if (!webAppUrl || typeof webAppUrl !== 'string') {
      throw new Error(`Invalid WEBAPPURL: ${webAppUrl}`);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–±–∞–∑–æ–≤—ã–π URL –∏–∑ WEBAPPURL)
    let imageUrl: string;
    try {
      const urlObj = new URL(webAppUrl);
      imageUrl = `${urlObj.origin}/IMG_5349.jpeg`;
    } catch (e) {
      throw new Error(`Failed to parse WEBAPPURL: ${webAppUrl}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = Markup.inlineKeyboard([
      Markup.button.webApp('‚öîÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—É—Ç—å!', webAppUrl),
    ]);

    // –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    const caption = `üî• <b>–°–í–ï–¢ –§–ê–ö–ï–õ–û–í –û–°–í–ï–©–ê–ï–¢ –¢–ï–ë–Ø –í –¢–ï–ú–ù–û–¢–ï –ü–û–î–ó–ï–ú–ï–õ–¨–Ø</b>
–ê–ì–ê! –ù–û–í–´–ô –ò–°–ö–ê–¢–ï–õ–¨ –ü–†–ò–ö–õ–Æ–ß–ï–ù–ò–ô –í –ú–û–†–ê–õ–ï–û–ù–ï!

–¢—ã –∑–∞–±—Ä–µ–ª –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –ó–¥–µ—Å—å:
‚Ä¢ –°–∫—É—á–Ω—ã–µ –æ–ø—Ä–æ—Å—ã = üîÆ –ö–≤–µ—Å—Ç—ã –Ω–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã = üó∫Ô∏è –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –û–∫—Ç–æ–≥—Ä–∞–º–º—ã
‚Ä¢ –¢–≤–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = üèÜ –¢–∏—Ç—É–ª—ã (¬´–£–±–∏–π—Ü–∞ –ê–ø–∞—Ç–∏–∏¬ª, ¬´–ü–æ–∂–∏—Ä–∞—Ç–µ–ª—å –¶–µ–ª–µ–π¬ª)!
üîÆ –î—É—Ö–∏ –ü–æ–¥–∑–µ–º–µ–ª—å—è —à–µ–ø—á—É—Ç —Ç–≤–æ–µ –∏–º—è. –û—Ç–≤–µ—Ç—å –Ω–∞ –∑–æ–≤:`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.replyWithPhoto(imageUrl, {
      caption: caption,
      parse_mode: 'HTML',
      reply_markup: keyboard.reply_markup
    });
    
    console.log(`Successfully handled /start for user: ${ctx.from.id}`);
  } catch (err) {
    const errorDetails = getErrorDetails(err);
    console.error('[START COMMAND ERROR]', {
      userId: ctx.from?.id,
      webAppUrl: webAppUrl,
      error: errorDetails
    });
    
    try {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    } catch (sendError) {
      console.error('Failed to send error notification:', getErrorDetails(sendError));
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.action('stats', async (ctx) => {
  try {
    console.log(`Handling stats for user: ${ctx.from.id}`);
    await ctx.reply('üìä –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!');
    await ctx.answerCbQuery();
    console.log(`Successfully handled stats for user: ${ctx.from.id}`);
  } catch (err) {
    const errorDetails = getErrorDetails(err);
    console.error('[STATS ACTION ERROR]', {
      userId: ctx.from?.id,
      error: errorDetails
    });
    
    try {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    } catch (answerError) {
      console.error('Failed to answer callback:', getErrorDetails(answerError));
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    console.warn(`Rejected non-POST request: ${req.method}`);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  const secretToken = req.headers['x-telegram-bot-api-secret-token'];
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø)
  const safeCompare = (a: string, b: string) => {
    try {
      const aBuf = Buffer.from(a);
      const bBuf = Buffer.from(b);
      return crypto.timingSafeEqual(aBuf, bBuf);
    } catch (e) {
      return false;
    }
  };

  if (
    !secretToken || 
    typeof secretToken !== 'string' ||
    !safeCompare(secretToken, process.env.WEBHOOKSECRETTOKEN!)
  ) {
    console.error('INVALID SECRET TOKEN', {
      received: secretToken || 'MISSING',
      expected: process.env.WEBHOOKSECRETTOKEN ? 
        '***' + process.env.WEBHOOKSECRETTOKEN.slice(-5) : 'MISSING',
      headers: req.headers
    });
    return res.status(401).json({ error: 'Invalid token' });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
  if (!req.body || Object.keys(req.body).length === 0) {
    console.error('EMPTY REQUEST BODY', {
      headers: req.headers
    });
    return res.status(400).json({ error: 'Empty body' });
  }

  try {
    console.log(`[PROCESSING UPDATE] ${req.body.update_id}`);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateType = Object.keys(req.body).find(key => key !== 'update_id') || 'unknown';
    console.log(`Update type: ${updateType}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.handleUpdate(req.body);
    
    console.log(`[SUCCESS] Processed update ${req.body.update_id}`);
    return res.status(200).json({ ok: true });
    
  } catch (err) {
    const errorDetails = getErrorDetails(err);
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    console.error('[WEBHOOK PROCESSING ERROR]', {
      updateId: req.body.update_id,
      updateType: Object.keys(req.body).find(key => key !== 'update_id') || 'unknown',
      error: errorDetails,
      bodyKeys: Object.keys(req.body)
    });
    
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK –¥–ª—è Telegram
    return res.status(200).json({ 
      error: 'Webhook processing failed but acknowledged'
    });
  }
}

// –§–∏–∫—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Vercel
process.on('SIGTERM', () => {
  console.log('SIGTERM received. Keeping alive for Vercel.');
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('[UNCAUGHT EXCEPTION]', getErrorDetails(error));
});

process.on('unhandledRejection', (reason) => {
  console.error('[UNHANDLED REJECTION]', {
    reason: getErrorDetails(reason)
  });
});
