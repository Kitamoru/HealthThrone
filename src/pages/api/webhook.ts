console.log("[Bot] TOKEN:", process.env.TOKEN ? "***" + process.env.TOKEN.slice(-5) : "MISSING");
console.log("[Bot] WEBAPPURL:", process.env.WEBAPPURL || "MISSING");

import { Telegraf, Context } from 'telegraf';
import type { NextApiRequest, NextApiResponse } from 'next';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.TOKEN || !process.env.WEBAPPURL) {
  console.error('Missing environment variables: TOKEN or WEBAPPURL');
  process.exit(1);
}

const bot = new Telegraf(process.env.TOKEN);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.use((ctx, next) => {
  console.log('Received update:', ctx.update);
  return next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  try {
    const keyboard = {
      inlinekeyboard: 
        [{
          text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: process.env.WEBAPP_URL }
        },
        {
          text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
          callback_data: 'stats'
        }
      ]
    };
    await ctx.reply('üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\!', {
      replymarkup: keyboard,
      parsemode: 'MarkdownV2'
    });
  } catch (err) {
    console.error('Error in /start command:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.action('stats', async (ctx) => {
  try {
    await ctx.reply('üìä –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\!');
    await ctx.answerCbQuery();
  } catch (err) {
    console.error('Error in stats callback:', err);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    await bot.handleUpdate(req.body);
    res.status(200).json({ ok: true });
  } catch (err) {
    console.error('Webhook error:', { error: err, body: req.body });
    res.status(500).json({ error: 'Webhook processing failed' });
  }
}
