import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useTelegram } from '../hooks/useTelegram';
import { BurnoutProgress } from '../components/BurnoutProgress';
import { api } from '../lib/api';
import { Loader } from '../components/Loader';

interface Friend {
  id: number;
  friend_username: string;
  burnout_level: number;
}

interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

type FriendsResponse = ApiResponse<Friend[]>;
type DeleteResponse = ApiResponse<null>;

export default function FriendsPage() {
  const router = useRouter();
  const { user, isReady, initData } = useTelegram();
  const [friends, setFriends] = useState<Friend[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    if (!isReady || !user?.id) return;

    const loadFriends = async () => {
      try {
        const response = await api.getFriends(initData) as FriendsResponse;
        
        if (response.success && response.data) {
          setFriends(response.data);
        } else {
          if (response.error?.includes("Unauthorized")) {
            setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram");
          } else {
            setError(response.error || 'Failed to load friends');
          }
        }
      } catch (err) {
        setError('Network error');
      } finally {
        setLoading(false);
      }
    };

    loadFriends();
  }, [isReady, user?.id, initData]);

  const handleAddFriend = () => {
    if (window.Telegram?.WebApp) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
      const referralCode = `ref_${user?.id}`;
      const shareUrl = `${window.location.origin}?ref=${referralCode}`;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      const shareText = `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–æ–µ–π –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è! ${shareUrl}`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
      window.Telegram.WebApp.shareUrl(shareUrl, shareText);
    } else {
      // Fallback –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const referralCode = `ref_${user?.id}`;
      const shareUrl = `${window.location.origin}?ref=${referralCode}`;
      navigator.clipboard.writeText(shareUrl);
      alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–≥–æ–º.');
    }
  };

  const handleDeleteFriend = async (friendId: number) => {
    try {
      const response = await api.deleteFriend(friendId, initData) as DeleteResponse;
      
      if (response.success) {
        setFriends(friends.filter(f => f.id !== friendId));
      } else {
        if (response.error?.includes("Unauthorized")) {
          setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram");
        } else {
          setError(response.error || 'Failed to delete friend');
        }
      }
    } catch (err) {
      setError('Network error');
    }
  };

  if (loading) return <Loader />;

  return (
    <div className="container">
      <button className="back-btn" onClick={() => router.push('/')}>
        üìä
      </button>

      <h1>My Friends</h1>

      {error && (
        <div className={`error-message ${error.includes("Unauthorized") ? "auth-error" : ""}`}>
          {error}
        </div>
      )}

      <div className="friends-list">
        {friends.length === 0 ? (
          <p>No friends yet. Add some friends to track their burnout levels.</p>
        ) : (
          friends.map(friend => (
            <div key={friend.id} className="friend-card">
              <div className="friend-header">
                <span className="friend-username">@{friend.friend_username}</span>
                <button
                  className="delete-btn"
                  onClick={() => handleDeleteFriend(friend.id)}
                >
                  ‚úï
                </button>
              </div>
              <BurnoutProgress level={friend.burnout_level} />
              <div className="burnout-level">{friend.burnout_level}%</div>
            </div>
          ))
        )}
      </div>

      <div className="add-friend-section">
        <button className="add-friend-btn" onClick={handleAddFriend}>
          Add Friend
        </button>
        <p className="add-friend-hint">
          Share the app with a friend to add them to your tracking list
        </p>
      </div>

      <div className="menu">
        <button className="menu-btn" onClick={() => router.push('/')}>üìä</button>
        <button className="menu-btn active" onClick={() => router.push('/friends')}>üìà</button>
        <button className="menu-btn">‚öôÔ∏è</button>
        <button className="menu-btn">‚ÑπÔ∏è</button>
      </div>
    </div>
  );
}
