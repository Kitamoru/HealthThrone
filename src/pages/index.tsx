import React, { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useTelegram } from '../hooks/useTelegram';
import { BurnoutProgress } from '../components/BurnoutProgress';
import { QuestionCard } from '../components/QuestionCard';
import { Loader } from '../components/Loader';
import { api, Sprite } from '../lib/api'; // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Sprite
import { UserProfile } from '../lib/supabase';
import { format } from 'date-fns';

interface Question {
  id: number;
  text: string;
  positive_answer: string;
  negative_answer: string;
  weight: number;
}

const QUESTIONS: Question[] = [
  {
    id: 1,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—Ç–¥—ã—Ö–∞",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 3
  },
  {
    id: 2,
    text: "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 3,
    text: "–Ø —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É—é —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 4,
    text: "–£ –º–µ–Ω—è —Å–Ω–∏–∑–∏–ª–∞—Å—å –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ —Ä–∞–±–æ—Ç–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 3
  },
  {
    id: 5,
    text: "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 6,
    text: "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 7,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏—Å—Ç–æ—â–µ–Ω–Ω—ã–º",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 3
  },
  {
    id: 8,
    text: "–£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 9,
    text: "–Ø —Ö–æ—Ä–æ—à–æ —Å–ø–ª—é",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: -2
  },
  {
    id: 10,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: -2
  },
  {
    id: 11,
    text: "–£ –º–µ–Ω—è —Ö–æ—Ä–æ—à–∏–π –∞–ø–ø–µ—Ç–∏—Ç",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: -1
  }
];

export default function Home() {
  const router = useRouter();
  const { user, initData } = useTelegram();
  const [questions] = useState<Question[]>(QUESTIONS);
  const [answers, setAnswers] = useState<Record<number, boolean>>({});
  const [initialBurnoutLevel, setInitialBurnoutLevel] = useState(0); // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏–∑ –±–∞–∑—ã —É—Ä–æ–≤–µ–Ω—å
  const [currentBurnoutDelta, setCurrentBurnoutDelta] = useState(0); // –î–µ–ª—å—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
  const [burnoutLevel, setBurnoutLevel] = useState(0); // = initialBurnoutLevel + currentBurnoutDelta
  const [loading, setLoading] = useState(true);
  const [apiError, setApiError] = useState<string | null>(null);
  const [alreadyAttempted, setAlreadyAttempted] = useState(false);
  const [spriteUrl, setSpriteUrl] = useState<string | undefined>(undefined);

     // –í—ã–Ω–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const loadUserData = useCallback(async () => {
    if (!user?.id) return;
    
    try {
      const response = await api.getUserData(user.id, initData);
      if (response.success && response.data) {
        const userData = response.data as UserProfile;
        const level = userData.burnout_level || 0;
        setInitialBurnoutLevel(level);
        setBurnoutLevel(level);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
        const today = format(new Date(), 'yyyy-MM-dd');
        if (userData.last_attempt_date === today) {
          setAlreadyAttempted(true);
        } else {
          setAlreadyAttempted(false);
          setAnswers({}); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        }
      }
    } catch (err) {
      console.error('Error loading user data:', err);
    } finally {
      setLoading(false);
    }
  }, [user?.id, initData]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    setLoading(true);
    loadUserData();
  }, [loadUserData]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  useEffect(() => {
    const handleRouteChange = () => {
      if (router.pathname === '/') {
        loadUserData();
      }
    };

    router.events.on('routeChangeComplete', handleRouteChange);
    return () => {
      router.events.off('routeChangeComplete', handleRouteChange);
    };
  }, [loadUserData, router]);

  const handleAnswer = async (questionId: number, isPositive: boolean) => {
    if (alreadyAttempted || !user) return;

    const question = questions.find(q => q.id === questionId);
    if (!question) return;
    
    const newAnswers = {
      ...answers,
      [questionId]: isPositive
    };
    setAnswers(newAnswers);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
    let answeredDelta = 0;
    Object.entries(newAnswers).forEach(([id, ans]) => {
      const qId = parseInt(id);
      const q = questions.find(q => q.id === qId);
      if (q && ans) {
        answeredDelta += q.weight;
      }
    });
    
    const newLevel = Math.max(0, Math.min(100, initialBurnoutLevel + answeredDelta));
    setBurnoutLevel(newLevel);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    try {
      await api.updateBurnoutLevel(user.id, newLevel, initData);
    } catch (error) {
      console.error('Error saving burnout level:', error);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    const allAnswered = questions.every(q => q.id in newAnswers);
    if (allAnswered && !alreadyAttempted) {
      try {
        await api.updateAttemptDate(user.id, initData);
        setAlreadyAttempted(true);
      } catch (error) {
        console.error('Failed to update attempt date:', error);
        setApiError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  };

  if (!user) {
    return (
      <div className="error-message">
        –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
      </div>
    );
  }

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="container">
      <BurnoutProgress level={burnoutLevel} spriteUrl={spriteUrl} />
      
      <div className="content">
        {alreadyAttempted || allAnswered ? (
          <div className="time-message">
            <div className="info-message">
              {alreadyAttempted 
                ? "–î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Å–æ–±—Ä–∞–Ω—ã, –∂–¥–µ–º –í–∞—Å –∑–∞–≤—Ç—Ä–∞!" 
                : `üéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è: ${burnoutLevel}%`}
            </div>
          </div>
        ) : (
          <div className="questions">
            {questions.map((question) => (
              <QuestionCard
                key={question.id}
                question={question}
                onAnswer={handleAnswer}
                answered={question.id in answers}
              />
            ))}
          </div>
        )}
      </div>

      <div className="menu">
        <Link href="/" passHref>
          <button className={`menu-btn ${router.pathname === '/' ? 'active' : ''}`}>
            üìä
          </button>
        </Link>
        <Link href="/friends" passHref>
          <button className={`menu-btn ${router.pathname === '/friends' ? 'active' : ''}`}>
            üìà
          </button>
        </Link>
        <Link href="/shop" passHref>
          <button className={`menu-btn ${router.pathname === '/shop' ? 'active' : ''}`}>
            üõçÔ∏è
          </button>
        </Link>
        <button className="menu-btn">‚ÑπÔ∏è</button>
      </div>
    </div>
  );
}
