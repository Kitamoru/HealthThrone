import React, { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useTelegram } from '../hooks/useTelegram';
import { BurnoutProgress } from '../components/BurnoutProgress';
import { QuestionCard } from '../components/QuestionCard';
import { Loader } from '../components/Loader';
import { api } from '../lib/api';
import { UserProfile } from '../lib/types';
import { format, parseISO } from 'date-fns';

interface Question {
  id: number;
  text: string;
  positive_answer: string;
  negative_answer: string;
  weight: number;
}

const QUESTIONS: Question[] = [
  {
    id: 1,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—Ç–¥—ã—Ö–∞",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 3
  },
  {
    id: 2,
    text: "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 3,
    text: "–Ø —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É—é —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 4,
    text: "–£ –º–µ–Ω—è —Å–Ω–∏–∑–∏–ª–∞—Å—å –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ —Ä–∞–±–æ—Ç–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 3
  },
  {
    id: 5,
    text: "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 6,
    text: "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 7,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏—Å—Ç–æ—â–µ–Ω–Ω—ã–º",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 3
  },
  {
    id: 8,
    text: "–£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 9,
    text: "–Ø —Ö–æ—Ä–æ—à–æ —Å–ø–ª—é",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: -2
  },
  {
    id: 10,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: -2
  },
  {
    id: 11,
    text: "–£ –º–µ–Ω—è —Ö–æ—Ä–æ—à–∏–π –∞–ø–ø–µ—Ç–∏—Ç",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: -1
  }
];


export default function Home() {
  const router = useRouter();
  const { user, initData } = useTelegram();
  
  const [questions] = useState<Question[]>(QUESTIONS);
  const [answers, setAnswers] = useState<Record<number, boolean>>({});
  const [currentBurnoutLevel, setCurrentBurnoutLevel] = useState(0);
  const [loading, setLoading] = useState(true);
  const [apiError, setApiError] = useState<string | null>(null);
  const [surveyCompleted, setSurveyCompleted] = useState(false);
  const [alreadyAttempted, setAlreadyAttempted] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserData = useCallback(async () => {
    try {
      setApiError(null);
      
      if (!user?.id) return;

      const response = await api.getUserData(Number(user.id), initData);

      if (response.success && response.data) {
        const userData = response.data;
        const level = userData.burnout_level ?? 0;
        
        setCurrentBurnoutLevel(level);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
        if (userData.last_attempt_date) {
          const todayUTC = new Date().toISOString().split('T')[0];
          setAlreadyAttempted(userData.last_attempt_date === todayUTC);
        }
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if (response.status === 429) {
          setApiError("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è");
        } else {
          setApiError(response.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
        }
      }
    } catch (err) {
      setApiError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
    } finally {
      setLoading(false);
    }
  }, [user?.id, initData]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      await loadUserData();
    };
    fetchData();
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
  const handleAnswer = (questionId: number, isPositive: boolean) => {
    if (alreadyAttempted || !user) return;

    const question = questions.find(q => q.id === questionId);
    if (!question) return;

    const newAnswers = {
      ...answers,
      [questionId]: isPositive
    };

    setAnswers(newAnswers);

    // –†–∞—Å—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è
    const answeredDelta = Object.entries(newAnswers).reduce((sum, [id, ans]) => {
      if (!ans) return sum;
      const qId = parseInt(id);
      const q = questions.find(q => q.id === qId);
      return sum + (q?.weight || 0);
    }, 0);

    const newLevel = Math.max(0, Math.min(100, currentBurnoutLevel + answeredDelta));
    setCurrentBurnoutLevel(newLevel);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    if (questions.every(q => q.id in newAnswers)) {
      submitSurvey(answeredDelta);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const submitSurvey = async (totalScore: number) => {
    if (!user?.id) return;

    try {
      const response = await api.submitSurvey({
        telegramId: Number(user.id),
        newScore: totalScore,
        initData
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
      if (response.httpStatus === 429) {
        setApiError('–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è');
        setAlreadyAttempted(true);
        return;
      }

      if (!response.success) {
        setApiError(response.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        return;
      }

      // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      if (response.data) {
        setSurveyCompleted(true);
        setAlreadyAttempted(true);
        setCurrentBurnoutLevel(response.data.burnout_level);
      }
    } catch (error) {
      console.error('Survey submission failed:', error);
      setApiError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return <Loader />;
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
  if (!user) {
    return (
      <div className="error-message">
        –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
      </div>
    );
  }

  return (
    <div className="container">
      <BurnoutProgress level={currentBurnoutLevel} />
      <div className="content">
        {apiError && (
          <div className="error-message">{apiError}</div>
        )}

        {alreadyAttempted ? (
          <div className="time-message">
            <div className="info-message">
              –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è. –í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è: {currentBurnoutLevel}%
            </div>
          </div>
        ) : surveyCompleted ? (
          <div className="time-message">
            <div className="info-message">
              üéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è: {currentBurnoutLevel}%
            </div>
          </div>
        ) : (
          <div className="questions">
            {questions.map(question => (
              <QuestionCard
                key={question.id}
                question={question}
                onAnswer={handleAnswer}
                answered={question.id in answers}
              />
            ))}
          </div>
        )}
      </div>

      {/* –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <div className="menu">
        <Link href="/" passHref>
          <button className={`menu-btn ${router.pathname === '/' ? 'active' : ''}`}>üìä</button>
        </Link>
        <Link href="/friends" passHref>
          <button className={`menu-btn ${router.pathname === '/friends' ? 'active' : ''}`}>üìà</button>
        </Link>
        <Link href="/shop" passHref>
          <button className={`menu-btn ${router.pathname === '/shop' ? 'active' : ''}`}>üõçÔ∏è</button>
        </Link>
        <button className="menu-btn">‚ÑπÔ∏è</button>
      </div>
    </div>
  );
}
