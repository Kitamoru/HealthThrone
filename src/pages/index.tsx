import { useState, useEffect } from 'react';
import { useTelegram } from '@/hooks/useTelegram';
import { api } from '@/lib/api';
import { Loader } from '@/components/Loader';
import { BurnoutProgress } from '@/components/BurnoutProgress';
import { QuestionCard } from '@/components/QuestionCard';
import type { Question } from '@/types';

// –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const sampleQuestions: Question[] = [
  {
    id: 1,
    text: "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —É—Å—Ç–∞–ª–æ—Å—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—Ç–¥—ã—Ö–∞?",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 2,
    text: "–ß–∞—Å—Ç–æ –ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–µ?",
    positive_answer: "–ß–∞—Å—Ç–æ",
    negative_answer: "–†–µ–¥–∫–æ",
    weight: 3
  },
  {
    id: 3,
    text: "–¢—Ä—É–¥–Ω–æ –ª–∏ –≤–∞–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–∞—Ö?",
    positive_answer: "–¢—Ä—É–¥–Ω–æ",
    negative_answer: "–õ–µ–≥–∫–æ",
    weight: 2
  },
  {
    id: 4,
    text: "–ò—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –ª–∏ –≤—ã —Å—Ç—Ä–µ—Å—Å –æ—Ç —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á?",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 1
  },
  {
    id: 5,
    text: "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —Å–µ–±—è –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–º –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º–∏?",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 3
  }
];

export default function Home() {
  const { user, isReady } = useTelegram();
  const [questions, setQuestions] = useState<Question[]>([]);
  const [answers, setAnswers] = useState<Record<number, boolean>>({});
  const [burnoutLevel, setBurnoutLevel] = useState(0);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const initializeApp = async () => {
      if (!isReady) return;

      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ API
        setQuestions(sampleQuestions);
        setLoading(false);
      } catch (error) {
        console.error('Initialization error:', error);
        // Fallback to sample questions
        setQuestions(sampleQuestions);
        setLoading(false);
      }
    };

    initializeApp();
  }, [isReady, user]);

  const handleAnswer = (questionId: number, isPositive: boolean) => {
    const newAnswers = { ...answers, [questionId]: isPositive };
    setAnswers(newAnswers);

    // –ü–æ–¥—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è
    const totalWeight = questions.reduce((sum, q) => sum + q.weight, 0);
    const currentScore = questions.reduce((score, question) => {
      const answer = newAnswers[question.id];
      return score + (answer ? question.weight : 0);
    }, 0);

    const level = Math.round((currentScore / totalWeight) * 100);
    setBurnoutLevel(level);
  };

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="container">
      <BurnoutProgress level={burnoutLevel} />

      <div className="content">
        <div className="questions">
          {questions.map((question, index) => (
            <QuestionCard
              key={question.id}
              question={question}
              index={index}
              isAnswered={question.id in answers}
              onAnswer={(isPositive) => handleAnswer(question.id, isPositive)}
            />
          ))}
        </div>

        {Object.keys(answers).length === questions.length && (
          <div className="time-message">
            <div className="info-message">
              –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è: {burnoutLevel}%
            </div>
          </div>
        )}
      </div>

      <div className="menu">
        <button className="menu-btn">üìä</button>
        <button className="menu-btn">üìù</button>
        <button className="menu-btn">‚öôÔ∏è</button>
        <button className="menu-btn">‚ùì</button>
      </div>
    </div>
  );
}