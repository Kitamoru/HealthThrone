import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useTelegram } from '../hooks/useTelegram';
import { BurnoutProgress } from '../components/BurnoutProgress';
import { QuestionCard } from '../components/QuestionCard';
import { Loader } from '../components/Loader';
import { api } from '../lib/api';
import { UserProfile } from '../lib/supabase';

interface Question {
  id: number;
  text: string;
  positive_answer: string;
  negative_answer: string;
  weight: number;
}

const QUESTIONS: Question[] = [
  {
    id: 1,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—Ç–¥—ã—Ö–∞",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 3
  },
  {
    id: 2,
    text: "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 3,
    text: "–Ø —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É—é —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 4,
    text: "–£ –º–µ–Ω—è —Å–Ω–∏–∑–∏–ª–∞—Å—å –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ —Ä–∞–±–æ—Ç–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 3
  },
  {
    id: 5,
    text: "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 6,
    text: "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 7,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏—Å—Ç–æ—â–µ–Ω–Ω—ã–º",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 3
  },
  {
    id: 8,
    text: "–£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: 2
  },
  {
    id: 9,
    text: "–Ø —Ö–æ—Ä–æ—à–æ —Å–ø–ª—é",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: -2
  },
  {
    id: 10,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: -2
  },
  {
    id: 11,
    text: "–£ –º–µ–Ω—è —Ö–æ—Ä–æ—à–∏–π –∞–ø–ø–µ—Ç–∏—Ç",
    positive_answer: "–î–∞",
    negative_answer: "–ù–µ—Ç",
    weight: -1
  }
];

export default function Home() {
  const router = useRouter();
  const { user } = useTelegram();
  
  const [questions] = useState<Question[]>(QUESTIONS);
  const [answers, setAnswers] = useState<Record<number, boolean>>({});
  const [burnoutLevel, setBurnoutLevel] = useState(0);
  const [loading, setLoading] = useState(true);
  const [apiError, setApiError] = useState<string | null>(null);

  useEffect(() => {
    const loadUserData = async () => {
      if (!user?.id) return;
      
      try {
        const response = await api.getUserData(user.id);
        if (response.success && response.data) {
          const userData = response.data as UserProfile;
          setBurnoutLevel(userData.burnout_level || 0);
        }
        setLoading(false);
      } catch (err) {
        console.error('Error loading user data:', err);
        setLoading(false);
      }
    };
    
    loadUserData();
  }, [user?.id]);

    const handleAnswer = async (questionId: number, isPositive: boolean) => {
    console.log(`[Home] Handling answer for question ${questionId}: ${isPositive}`);
    
    const question = questions.find(q => q.id === questionId);
    if (!question) {
      console.warn(`[Home] Question not found: ${questionId}`);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    const newAnswers = {
      ...answers,
      [questionId]: isPositive
    };
    setAnswers(newAnswers);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è
    const delta = isPositive ? question.weight : 0;
    const newLevel = Math.max(0, Math.min(100, burnoutLevel + delta));
    setBurnoutLevel(newLevel);
    console.log(`[Home] New burnout level: ${newLevel}%`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (user?.id) {
      console.log(`[Home] Saving burnout level for user ${user.id}`);
      
      try {
        const saveResponse = await api.updateBurnoutLevel(user.id, newLevel);
        console.log('[Home] Save response:', saveResponse);
        
        if (!saveResponse.success) {
          console.error('[Home] Failed to save burnout level:', saveResponse.error);
        }
      } catch (error) {
        console.error('[Home] Error saving burnout level:', error);
      }
    } else {
      console.warn('[Home] Skipping save - no user ID');
    }
   };

  if (loading) {
    return <Loader />;
  }

  const allAnswered = questions.every(q => q.id in answers);

  return (
    <div className="container">
      <BurnoutProgress level={burnoutLevel} />
      
      <div className="content">
        {allAnswered ? (
          <div className="time-message">
            <div className="info-message">
              üéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è: {burnoutLevel}%
              <br />
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏.
            </div>
          </div>
        ) : (
          <div className="questions">
            {questions.map((question) => (
              <QuestionCard
                key={question.id}
                question={question}
                onAnswer={handleAnswer}
                answered={question.id in answers}
              />
            ))}
          </div>
        )}
      </div>

      <div className="menu-btn">
        <Link href="/" passHref>
          <button className="menu-btn">üìä</button>
        </Link>
        <Link href="/friends" passHref>
          <button className="menu-btn">üìà</button>
        </Link>
        <button className="menu-btn">‚öôÔ∏è</button>
        <button className="menu-btn">‚ÑπÔ∏è</button>
      </div>
      
      {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –≤ development) */}
      {process.env.NODE_ENV === 'development' && (
        <div style={{
          marginTop: '20px',
          padding: '10px',
          background: '#f0f0f0',
          borderRadius: '5px',
          fontSize: '12px'
        }}>
          <h3>Debug Information:</h3>
          <pre>{JSON.stringify({
            user: user ? { id: user.id, name: user.first_name } : null,
            burnoutLevel,
            answeredQuestions: Object.keys(answers).length,
            apiError
          }, null, 2)}</pre>
        </div>
      )}
    </div>
  );
}
