import React, { useState, useCallback, useMemo, useEffect, useRef } from 'react';
import dynamic from 'next/dynamic';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useTelegram } from '../hooks/useTelegram';
import { api } from '../lib/api';
import { Loader } from '../components/Loader';
import { motion, AnimatePresence } from 'framer-motion';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
const BurnoutProgress = dynamic(
  () => import('../components/BurnoutProgress').then(mod => mod.BurnoutProgress),
  { 
    loading: () => <div className="sprite-container">–ó–∞–≥—Ä—É–∑–∫–∞...</div>,
    ssr: false
  }
);

const OctalisysChart = dynamic(
  () => import('../components/OctalisysChart').then(mod => mod.OctalisysChart),
  { 
    loading: () => <div>–ó–∞–≥—Ä—É–∑–∫–∞ –û–∫—Ç–∞–ª–∏–∑–∞...</div>,
    ssr: false
  }
);

const DailyCheckupModal = dynamic(
  () => import('../components/DailyCheckupModal').then(mod => mod.DailyCheckupModal),
  {
    loading: () => <div>–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ä–æ—Å–∞...</div>,
    ssr: false
  }
);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –û–∫—Ç–∞–ª–∏–∑–∞
const OCTALYSIS_FACTORS = [
  "–°–º—ã—Å–ª", "–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ", "–ê–≤—Ç–æ–Ω–æ–º–∏—è", "–í–ª–∏—è–Ω–∏–µ",
  "–°–æ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å", "–†–µ–¥–∫–æ—Å—Ç—å", "–ò–∑–±–µ–≥–∞–Ω–∏–µ"
];

// –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —á–µ–∫–∞–ø–∞
const BURNOUT_QUESTIONS = [
  {
    id: 1,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—Ç–¥—ã—Ö–∞",
    weight: 3
  },
  {
    id: 2,
    text: "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ",
    weight: 2
  }
];

const OCTALYSIS_QUESTIONS = [
  {
    id: 3,
    text: "–Ø –≤–∏–∂—É —Å–º—ã—Å–ª –≤ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞—é",
    factor: 0,
    weight: 2
  },
  {
    id: 4,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏",
    factor: 1,
    weight: 2
  },
  {
    id: 5,
    text: "–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–∞ –≤ –≤—ã–±–æ—Ä–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏",
    factor: 2,
    weight: 3
  },
  {
    id: 6,
    text: "–Ø –≤–∏–∂—É –∫–∞–∫ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
    factor: 3,
    weight: 2
  },
  {
    id: 7,
    text: "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–≤—è–∑—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏/–¥—Ä—É–∑—å—è–º–∏",
    factor: 4,
    weight: 2
  },
  {
    id: 8,
    text: "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –Ω–æ–≤—ã–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
    factor: 5,
    weight: 3
  },
  {
    id: 9,
    text: "–Ø —Ü–µ–Ω—é —Ä–µ–¥–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è",
    factor: 6,
    weight: 2
  },
  {
    id: 10,
    text: "–Ø —Å—Ç–∞—Ä–∞—é—Å—å –∏–∑–±–µ–≥–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π",
    factor: 7,
    weight: 2
  }
];

const Home = () => {
  const router = useRouter();
  const { user, initData } = useTelegram();
  const queryClient = useQueryClient();
  
  const [showCheckup, setShowCheckup] = useState(false);
  const [apiError, setApiError] = useState<string | null>(null);
  const [spriteLoaded, setSpriteLoaded] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
  const isTodayUTC = useCallback((dateStr: string) => {
    if (!dateStr) return false;
    
    try {
      const date = new Date(dateStr);
      const now = new Date();
      
      return (
        date.getUTCFullYear() === now.getUTCFullYear() &&
        date.getUTCMonth() === now.getUTCMonth() &&
        date.getUTCDate() === now.getUTCDate()
      );
    } catch (e) {
      console.error('Date parsing error:', e);
      return false;
    }
  }, []);

  const { 
    data: userData, 
    isLoading, 
    isError,
    error: queryError,
    refetch: refetchUserData
  } = useQuery({
    queryKey: ['userData', user?.id],
    queryFn: async () => {
      if (!user?.id) return null;
      const response = await api.getUserData(Number(user.id), initData);
      
      if (!response.success) {
        throw new Error(response.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
      }
      
      return response.data;
    },
    enabled: !!user?.id,
    refetchOnWindowFocus: true,
  });

  useEffect(() => {
    if (queryError) {
      setApiError(queryError.message);
    }
  }, [queryError]);

  useEffect(() => {
    if (user?.id) {
      refetchUserData();
    }
  }, [user?.id, refetchUserData]);

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–π—Ç–∞
  useEffect(() => {
    if (userData?.current_sprite_url) {
      const img = new Image();
      img.src = userData.current_sprite_url;
      img.onload = () => setSpriteLoaded(true);
      img.onerror = () => {
        console.error('Failed to preload sprite');
        setSpriteLoaded(true);
      };
    } else {
      setSpriteLoaded(true);
    }
  }, [userData?.current_sprite_url]);

  const submitSurveyMutation = useMutation({
    mutationFn: async ({ burnoutDelta, factorsDelta }: { 
      burnoutDelta: number; 
      factorsDelta: number[] 
    }) => {
      if (!user?.id) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
      
      const response = await api.submitSurvey({
        telegramId: Number(user.id),
        burnoutDelta,
        factorsDelta,
        initData
      });

      if (!response.success) {
        throw new Error(response.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      }
      
      return response.data;
    },
    onSuccess: (data) => {
      queryClient.setQueryData(['userData', user?.id], (oldData: any) => {
        if (!oldData) return data;
        
        return {
          ...oldData,
          ...data,
          current_sprite_url: oldData.current_sprite_url
        };
      });
    },
    onError: (error: Error) => {
      setApiError(error.message);
    },
    onSettled: () => {
      setIsSubmitting(false);
    }
  });

  const initialBurnoutLevel = userData?.burnout_level ?? 0;
  const spriteUrl = userData?.current_sprite_url || '/sprite.gif';
  const alreadyAttemptedToday = userData?.last_attempt_date 
    ? isTodayUTC(userData.last_attempt_date) 
    : false;

  // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –û–∫—Ç–∞–ª–∏–∑–∞
  const octalysisFactors = useMemo(() => {
    if (userData?.octalysis_factors) {
      return userData.octalysis_factors;
    }
    // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return [50, 50, 50, 50, 50, 50, 50, 50];
  }, [userData]);

  const handleCompleteCheckup = useCallback((burnoutDelta: number, factorsDelta: number[]) => {
    setIsSubmitting(true);
    submitSurveyMutation.mutate({ burnoutDelta, factorsDelta });
    setShowCheckup(false);
  }, [submitSurveyMutation]);

  if (isLoading || !spriteLoaded) {
    return <Loader />;
  }

  if (isError || !user) {
    return (
      <div className="error-message">
        {apiError || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."}
      </div>
    );
  }

  return (
    <div className="container">
      <div className="character-section">
        <BurnoutProgress level={initialBurnoutLevel} spriteUrl={spriteUrl} />
      </div>

      <div className="octalysis-section">
        <h3 className="section-title">–ú–æ—è –º–æ—Ç–∏–≤–∞—Ü–∏—è</h3>
        <OctalisysChart factors={octalysisFactors} factorNames={OCTALYSIS_FACTORS} />
      </div>

      <div className="actions-section">
        <AnimatePresence>
          {apiError && !alreadyAttemptedToday && (
            <motion.div 
              className="error-message"
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0 }}
            >
              {apiError}
            </motion.div>
          )}
        </AnimatePresence>

        {alreadyAttemptedToday ? (
          <div className="info-card">
            <div className="info-icon">‚úÖ</div>
            <div className="info-content">
              <h4>–£–∂–µ –ø—Ä–æ—à–ª–∏ —Å–µ–≥–æ–¥–Ω—è</h4>
              <p>–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è: {initialBurnoutLevel}%</p>
              <p>–°–ª–µ–¥—É—é—â–∏–π —á–µ–∫–∞–ø –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞</p>
            </div>
          </div>
        ) : (
          <motion.button
            className="checkup-button"
            onClick={() => setShowCheckup(true)}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.98 }}
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <span>–û–±—Ä–∞–±–æ—Ç–∫–∞...</span>
            ) : (
              <>
                <span>–ü—Ä–æ–π—Ç–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫–∞–ø</span>
                <span className="pulse-animation"></span>
              </>
            )}
          </motion.button>
        )}
      </div>

      <div className="menu">
        <Link href="/" passHref>
          <button className={`menu-btn ${router.pathname === '/' ? 'active' : ''}`}>
            <span className="icon">üìä</span>
            <span className="label">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
          </button>
        </Link>
        <Link href="/friends" passHref>
          <button className={`menu-btn ${router.pathname === '/friends' ? 'active' : ''}`}>
            <span className="icon">üë•</span>
            <span className="label">–î—Ä—É–∑—å—è</span>
          </button>
        </Link>
        <Link href="/shop" passHref>
          <button className={`menu-btn ${router.pathname === '/shop' ? 'active' : ''}`}>
            <span className="icon">üõçÔ∏è</span>
            <span className="label">–ú–∞–≥–∞–∑–∏–Ω</span>
          </button>
        </Link>
        <Link href="/reference" passHref>
          <button className={`menu-btn ${router.pathname === '/reference' ? 'active' : ''}`}>
            <span className="icon">‚ÑπÔ∏è</span>
            <span className="label">–°–ø—Ä–∞–≤–∫–∞</span>
          </button>
        </Link>
      </div>

      {showCheckup && (
        <DailyCheckupModal
          burnoutQuestions={BURNOUT_QUESTIONS}
          octalysisQuestions={OCTALYSIS_QUESTIONS}
          onClose={() => setShowCheckup(false)}
          onComplete={handleCompleteCheckup}
        />
      )}
    </div>
  );
};

export default React.memo(Home);
