import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useTelegram } from '../hooks/useTelegram';
import { Loader } from '../components/Loader';
import { api, Sprite } from '../lib/api';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserData {
  id: number;
  username?: string;
  first_name?: string;
  last_name?: string;
  coins: number;
  burnout_level: number;
  current_sprite_id?: number | null;
  last_attempt_date?: string;
}

// –ù–æ–≤—ã–π —Ç–∏–ø —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–ª–∏—á–∏–µ–º —Ü–µ–Ω—ã
type SpriteWithPrice = Omit<Sprite, 'price'> & { price: number };

export default function Shop() {
  const router = useRouter();
  const { user, isReady, initData } = useTelegram();
  const [sprites, setSprites] = useState<SpriteWithPrice[]>([]);
  const [loading, setLoading] = useState(true);
  const [coins, setCoins] = useState(0);
  const [currentSprite, setCurrentSprite] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!isReady || !user?.id) return;
    
    const fetchData = async () => {
      try {
        setLoading(true);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–π—Ç–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
        const spritesResponse = await api.getSprites();
        if (spritesResponse.success) {
          // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ —É –≤—Å–µ—Ö —Å–ø—Ä–∞–π—Ç–æ–≤ –µ—Å—Ç—å —Ü–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
          const spritesWithPrice: SpriteWithPrice[] = (spritesResponse.data || []).map(sprite => ({
            ...sprite,
            price: sprite.price || 0
          }));
          setSprites(spritesWithPrice);
        } else {
          setError(spritesResponse.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–π—Ç—ã');
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResponse = await api.getUserData(user.id, initData);
        if (userResponse.success && userResponse.data) {
          // –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
          const userData = userResponse.data as UserData;
          setCoins(userData.coins || 0);
          setCurrentSprite(userData.current_sprite_id || null);
        } else {
          setError(userResponse.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        setLoading(false);
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        setLoading(false);
      }
    };
    
    fetchData();
  }, [isReady, user, initData]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å–ø—Ä–∞–π—Ç–∞
  const handlePurchase = async (spriteId: number) => {
    // –ù–∞—Ö–æ–¥–∏–º —Å–ø—Ä–∞–π—Ç –ø–æ ID
    const sprite = sprites.find(s => s.id === spriteId);
    if (!sprite) {
      setError('–°–ø—Ä–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç (—Ç–µ–ø–µ—Ä—å price –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —á–∏—Å–ª–æ)
    if (coins < sprite.price) {
      setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç');
      return;
    }
    
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
      const response = await api.purchaseSprite(user!.id, spriteId, initData);
      if (response.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç
        setCoins(coins - sprite.price);
        setError(null);
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø—Ä–∞–π—Ç–∞
  const handleEquip = async (spriteId: number) => {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ API
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤—ã–∑–æ–≤ API
      const mockEquip = async () => {
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve({ success: true });
          }, 300);
        });
      };
      
      const response: any = await mockEquip();
      
      if (response.success) {
        setCurrentSprite(spriteId);
        setError(null);
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã
  if (loading) {
    return <Loader />;
  }

  return (
    <div className="container">
      <div className="scrollable-content">
        <div className="header">
          <h2>–ú–∞–≥–∞–∑–∏–Ω —Å–ø—Ä–∞–π—Ç–æ–≤</h2>
          <div className="coins-display">–ú–æ–Ω–µ—Ç—ã: {coins}</div>
        </div>
        
        {error && <div className="error">{error}</div>}
        
        <div className="sprites-grid">
          {sprites.map(sprite => (
            <div key={sprite.id} className="sprite-card">
              <img 
                src={sprite.image_url} 
                alt={sprite.name} 
                className="sprite-image"
              />
              <div className="sprite-info">
                <h3>{sprite.name}</h3>
                <div className="sprite-price">
                  –¶–µ–Ω–∞: {sprite.price > 0 ? `${sprite.price} –º–æ–Ω–µ—Ç` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
                </div>
                <div className="sprite-actions">
                  {coins >= sprite.price ? (
                    <button 
                      className="buy-btn"
                      onClick={() => handlePurchase(sprite.id)}
                    >
                      –ö—É–ø–∏—Ç—å
                    </button>
                  ) : (
                    <button className="buy-btn disabled" disabled>
                      –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                    </button>
                  )}
                  <button 
                    className="equip-btn"
                    onClick={() => handleEquip(sprite.id)}
                    disabled={currentSprite === sprite.id}
                  >
                    {currentSprite === sprite.id ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'}
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ù–∏–∂–Ω–µ–µ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <div className="menu">
        <Link href="/" passHref>
          <button className="menu-btn">üìä</button>
        </Link>
        <Link href="/friends" passHref>
          <button className="menu-btn">üìà</button>
        </Link>
        <Link href="/shop" passHref>
          <button className="menu-btn active">üõçÔ∏è</button>
        </Link>
        <button className="menu-btn">‚ÑπÔ∏è</button>
      </div>
    </div>
  );
}
