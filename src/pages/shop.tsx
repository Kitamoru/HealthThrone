import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useTelegram } from '../hooks/useTelegram';
import { Loader } from '../components/Loader';
import { api } from '../lib/api';
import { UserProfile, Sprite } from '../lib/types';
import { validateRequiredFields } from '../utils/validation';

export default function Shop() {
  const router = useRouter();
  const { user, isReady, initData } = useTelegram();
  const [sprites, setSprites] = useState<Sprite[]>([]);
  const [loading, setLoading] = useState(true);
  const [coins, setCoins] = useState(0);
  const [currentSprite, setCurrentSprite] = useState<number | null>(null);
  const [ownedSprites, setOwnedSprites] = useState<number[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    console.log('[Shop] Component mounted');
    return () => console.log('[Shop] Component unmounted');
  }, []);

 useEffect(() => {
  if (!isReady || !user?.id || !initData) return;

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∏ API –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        const [
          userResponse,
          spritesResponse,
          ownedResponse
        ] = await Promise.all([
        api.getUserData(Number(user.id), initData),
        api.getSprites(initData),
        // –ü–µ—Ä–µ–¥–∞–µ–º initData –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        api.getOwnedSprites(Number(user.id), initData)
      ]);


        console.log('[Shop] API responses:', {
          userResponse,
          spritesResponse,
          ownedResponse
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
        if (!isMounted) return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userResponse.success && userResponse.data) {
          setCoins(userResponse.data.coins || 0);
          setCurrentSprite(userResponse.data.current_sprite_id || null);
        } else if (userResponse.error) {
          setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${userResponse.error}`);
        }

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø—Ä–∞–π—Ç–æ–≤
        if (spritesResponse.success) {
          if (Array.isArray(spritesResponse.data)) {
            setSprites(spritesResponse.data);
            console.log('[Shop] Sprites loaded:', spritesResponse.data);
          } else {
            console.error('[Shop] Invalid sprites data format:', spritesResponse.data);
            setError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤');
          }
        } else {
          setError(spritesResponse.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–ø—Ä–∞–π—Ç–∞—Ö');
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤
        if (ownedResponse.success && Array.isArray(ownedResponse.data)) {
          setOwnedSprites(ownedResponse.data);
        } else if (ownedResponse.error) {
          setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ø—Ä–∞–π—Ç–æ–≤: ${ownedResponse.error}`);
        }
      } catch (err) {
        console.error('[Shop] Unhandled fetch error:', err);
        if (isMounted) {
          setError('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };

    fetchData();

    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    return () => {
      isMounted = false;
      console.log('[Shop] Data fetch cancelled');
    };
  }, [isReady, user, initData]);

  const handlePurchase = async (spriteId: number) => {
    const validationError = validateRequiredFields(
      { user, initData },
      ['user', 'initData'],
      '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ª–∏—á–∏–µ –æ–±–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
    );
    if (validationError) {
      setError(validationError);
      return;
    }

    if (!user?.id) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    const sprite = sprites.find((item) => item.id === spriteId);  
    if (!sprite) {
      setError('–°–ø—Ä–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (ownedSprites.includes(spriteId)) {
      setError('–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç —Å–ø—Ä–∞–π—Ç.');
      return;
    }

    if (coins < sprite.price) {
      setError('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
      return;
    }

    try {
      const purchaseResult = await api.purchaseSprite(Number(user.id), spriteId, initData!);
      if (purchaseResult.success) {
        setOwnedSprites((prev) => [...prev, spriteId]);
        setCoins((prev) => prev - sprite.price);
        setError(null);
      } else {
        setError(purchaseResult.error || '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å–ø—Ä–∞–π—Ç–∞.');
      }
    } catch (err) {
      setError('–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.');
    }
  };

  const handleEquip = async (spriteId: number) => {
    const validationError = validateRequiredFields(
      { user, initData },
      ['user', 'initData'],
      '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.'
    );
    if (validationError) {
      setError(validationError);
      return;
    }

    if (!user?.id) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    try {
      const equipResult = await api.equipSprite(Number(user.id), spriteId, initData!);
      if (equipResult.success) {
        setCurrentSprite(spriteId);
        setError(null);
      } else {
        setError(equipResult.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å–ø—Ä–∞–π—Ç–∞.');
      }
    } catch (err) {
      setError('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–ø—Ä–∞–π—Ç.');
    }
  };

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="container">
      <div className="scrollable-content">
        <div className="header">
          <h2>–ú–∞–≥–∞–∑–∏–Ω —Å–ø—Ä–∞–π—Ç–æ–≤</h2>
          <div className="coins-display">–ú–æ–Ω–µ—Ç—ã: {coins}</div>
        </div>

        {error && <div className="error">{error}</div>}

        {!user?.id ? (
          <div className="error">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
          </div>
        ) : sprites.length === 0 ? (
          <div className="info">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤.</div>
        ) : (
          <div className="sprites-grid">
            {sprites.map((sprite) => {
              const isOwned = ownedSprites.includes(sprite.id);
              const isEquipped = currentSprite === sprite.id;

              return (
                <div key={sprite.id} className="sprite-card">
                  <img
                    src={sprite.image_url}
                    alt={sprite.name}
                    className="sprite-image"
                    onError={(e) =>
                      (e.currentTarget.src =
                        'https://via.placeholder.com/150?text=No+Image')
                    }
                  />
                  <div className="sprite-info">
                    <h3>{sprite.name}</h3>
                    <div className="sprite-price">
                      –¶–µ–Ω–∞:{' '}
                      {sprite.price > 0 ? `${sprite.price} –º–æ–Ω–µ—Ç` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
                    </div>
                    <div className="sprite-actions">
                      {!isOwned ? (
                        coins >= sprite.price ? (
                          <button
                            className="buy-btn"
                            onClick={() => handlePurchase(sprite.id)}
                          >
                            –ö—É–ø–∏—Ç—å
                          </button>
                        ) : (
                          <button className="buy-btn disabled" disabled>
                            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                          </button>
                        )
                      ) : (
                        <button
                          className="equip-btn"
                          onClick={() => handleEquip(sprite.id)}
                          disabled={isEquipped}
                        >
                          {isEquipped ? '–ü—Ä–∏–º–µ–Ω—ë–Ω' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>

      <div className="menu">
        <Link href="/" passHref>
          <button className="menu-btn">üìä</button>
        </Link>
        <Link href="/friends" passHref>
          <button className="menu-btn">üìà</button>
        </Link>
        <Link href="/shop" passHref>
          <button className="menu-btn active">üõçÔ∏è</button>
        </Link>
        <Link href="/info" passHref>
          <button className="menu-btn">‚ÑπÔ∏è</button>
        </Link>
      </div>
    </div>
  );
}
