import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useTelegram } from '../hooks/useTelegram';
import { Loader } from '../components/Loader';
import { api } from '../lib/api';
import { UserProfile, Sprite } from '../lib/types';
import { validateRequiredFields } from '../utils/validation';
import DOMPurify from 'dompurify'; // –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è

export default function Shop() {
  const router = useRouter();
  const { user, isReady, initData } = useTelegram();
  const [sprites, setSprites] = useState<Sprite[]>([]);
  const [loading, setLoading] = useState(true);
  const [coins, setCoins] = useState(0);
  const [currentSprite, setCurrentSprite] = useState<number | null>(null);
  const [ownedSprites, setOwnedSprites] = useState<number[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    console.log('[Shop] Component mounted');
    return () => console.log('[Shop] Component unmounted');
  }, []);

  useEffect(() => {
    if (!isReady || !user?.id || !initData) return;

    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);

        const [userResponse, spritesResponse, ownedResponse] = await Promise.all([
          api.getUserData(Number(user.id), initData),
          api.getSprites(initData),
          api.getOwnedSprites(Number(user.id), initData)
        ]);

        if (userResponse.success && userResponse.data) {
          setCoins(userResponse.data.coins || 0);
          setCurrentSprite(userResponse.data.current_sprite_id || null);
        } else if (userResponse.error) {
          setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${userResponse.error}`);
        }

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤
        if (spritesResponse.success && spritesResponse.data) {
          setSprites(spritesResponse.data);
        } else {
          setError(spritesResponse.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–ø—Ä–∞–π—Ç–∞—Ö');
        }

        if (ownedResponse.success && Array.isArray(ownedResponse.data)) {
          setOwnedSprites(ownedResponse.data);
        } else if (ownedResponse.error) {
          setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ø—Ä–∞–π—Ç–æ–≤: ${ownedResponse.error}`);
        }
      } catch (err) {
        setError('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [isReady, user, initData]);

  const handleAction = async (
    action: () => Promise<ApiResponse>,
    successMessage: string
  ) => {
    const validationError = validateRequiredFields(
      { user, initData },
      ['user', 'initData'],
      '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
    );
    
    if (validationError || !user?.id) {
      setError(validationError || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    try {
      const result = await action();
      if (result.success) {
        setError(null);
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        const userResponse = await api.getUserData(Number(user.id), initData!);
        if (userResponse.success && userResponse.data) {
          setCoins(userResponse.data.coins || 0);
          setCurrentSprite(userResponse.data.current_sprite_id || null);
        }
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏');
      }
    } catch (err) {
      setError('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
  };

  const handlePurchase = (spriteId: number) => {
    handleAction(
      () => api.purchaseSprite(Number(user!.id), spriteId, initData!),
      '–°–ø—Ä–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω'
    );
  };

  const handleEquip = (spriteId: number) => {
    handleAction(
      () => api.equipSprite(Number(user!.id), spriteId, initData!),
      '–°–ø—Ä–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω'
    );
  };

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="container">
      <div className="scrollable-content">
        <div className="header">
          <h2>–ú–∞–≥–∞–∑–∏–Ω —Å–ø—Ä–∞–π—Ç–æ–≤</h2>
          <div className="coins-display">–ú–æ–Ω–µ—Ç—ã: {coins}</div>
        </div>

        {/* –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫ */}
        {error && (
          <div 
            className="error" 
            dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(error) }} 
          />
        )}

        {!user?.id ? (
          <div className="error">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
          </div>
        ) : sprites.length === 0 ? (
          <div className="info">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤.</div>
        ) : (
          <div className="sprites-grid">
            {sprites.map((sprite) => {
              const isOwned = ownedSprites.includes(sprite.id);
              const isEquipped = currentSprite === sprite.id;

              return (
                <div key={`sprite-${sprite.id}`} className="sprite-card"> {/* –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á */}
                  <img
                    src={sprite.image_url}
                    alt={sprite.name}
                    className="sprite-image"
                    onError={(e) => 
                      (e.currentTarget.src = 'https://via.placeholder.com/150?text=No+Image')
                    }
                  />
                  <div className="sprite-info">
                    <h3>{sprite.name}</h3>
                    <div className="sprite-price">
                      –¶–µ–Ω–∞: {sprite.price > 0 ? `${sprite.price} –º–æ–Ω–µ—Ç` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
                    </div>
                    <div className="sprite-actions">
                      {!isOwned ? (
                        coins >= sprite.price ? (
                          <button className="buy-btn" onClick={() => handlePurchase(sprite.id)}>
                            –ö—É–ø–∏—Ç—å
                          </button>
                        ) : (
                          <button className="buy-btn disabled" disabled>
                            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                          </button>
                        )
                      ) : (
                        <button
                          className="equip-btn"
                          onClick={() => handleEquip(sprite.id)}
                          disabled={isEquipped}
                        >
                          {isEquipped ? '–ü—Ä–∏–º–µ–Ω—ë–Ω' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>

      <div className="menu">
        <Link href="/" passHref>
          <button className="menu-btn" title="–ì–ª–∞–≤–Ω–∞—è">üìä –ì–ª–∞–≤–Ω–∞—è</button>
        </Link>
        <Link href="/friends" passHref>
          <button className="menu-btn" title="–î—Ä—É–∑—å—è">üìà –î—Ä—É–∑—å—è</button>
        </Link>
        <Link href="/shop" passHref>
          <button className="menu-btn active" title="–ú–∞–≥–∞–∑–∏–Ω">üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</button>
        </Link>
        <Link href="/info" passHref>
          <button className="menu-btn" title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">‚ÑπÔ∏è –ò–Ω—Ñ–æ</button>
        </Link>
      </div>
    </div>
  );
}
