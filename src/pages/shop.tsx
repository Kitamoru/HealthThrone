import React, { useState, useCallback } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useTelegram } from '../hooks/useTelegram';
import { Loader } from '../components/Loader';
import { api } from '../lib/api';
import { Sprite } from '../lib/types';
import { validateRequiredFields } from '../utils/validation';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

export default function Shop() {
  const router = useRouter();
  const { user, initData } = useTelegram();
  const queryClient = useQueryClient();
  const [error, setError] = useState<string | null>(null);
  const [processing, setProcessing] = useState<number | null>(null);

  const telegramId = Number(user?.id);

  // –ó–∞–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const { data: userData, isLoading: userLoading } = useQuery({
    queryKey: ['user', telegramId],
    queryFn: () => api.getUserData(telegramId, initData),
    enabled: !!telegramId && !!initData,
    staleTime: 5 * 60 * 1000,
    retry: 1,
  });

  const { data: sprites, isLoading: spritesLoading } = useQuery({
    queryKey: ['sprites'],
    queryFn: () => api.getSprites(initData),
    staleTime: 10 * 60 * 1000,
    retry: 1,
  });

  const { data: ownedSprites, isLoading: ownedLoading } = useQuery({
    queryKey: ['ownedSprites', telegramId],
    queryFn: () => api.getOwnedSprites(telegramId, initData),
    enabled: !!telegramId && !!initData,
    staleTime: 5 * 60 * 1000,
    retry: 1,
  });

  // –ú—É—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø—Ä–∞–π—Ç–æ–≤
  const purchaseMutation = useMutation({
    mutationFn: (spriteId: number) => 
      api.purchaseSprite(telegramId, spriteId, initData),
    onSuccess: () => {
      queryClient.invalidateQueries(['user', telegramId]);
      queryClient.invalidateQueries(['ownedSprites', telegramId]);
    },
  });

  const equipMutation = useMutation({
    mutationFn: (spriteId: number) => 
      api.equipSprite(telegramId, spriteId, initData),
    onSuccess: () => {
      queryClient.invalidateQueries(['user', telegramId]);
    },
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º—É—Ç–∞—Ü–∏–π
  const handlePurchase = useCallback(async (spriteId: number) => {
    const validationError = validateRequiredFields(
      { user, initData },
      ['user', 'initData'],
      '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ª–∏—á–∏–µ –æ–±–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
    );
    if (validationError) {
      setError(validationError);
      return;
    }

    if (!telegramId) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    const sprite = sprites?.find((item) => item.id === spriteId);
    if (!sprite) {
      setError('–°–ø—Ä–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (ownedSprites?.includes(spriteId)) {
      setError('–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç —Å–ø—Ä–∞–π—Ç.');
      return;
    }

    if ((userData?.data?.coins || 0) < sprite.price) {
      setError('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
      return;
    }

    try {
      setProcessing(spriteId);
      const result = await purchaseMutation.mutateAsync(spriteId);
      if (!result.success) {
        setError(result.error || '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å–ø—Ä–∞–π—Ç–∞.');
      } else {
        setError(null);
      }
    } catch (err) {
      setError('–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.');
    } finally {
      setProcessing(null);
    }
  }, [user, initData, telegramId, sprites, ownedSprites, userData, purchaseMutation]);

  const handleEquip = useCallback(async (spriteId: number) => {
    const validationError = validateRequiredFields(
      { user, initData },
      ['user', 'initData'],
      '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.'
    );
    if (validationError) {
      setError(validationError);
      return;
    }

    if (!telegramId) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    try {
      setProcessing(spriteId);
      const result = await equipMutation.mutateAsync(spriteId);
      if (!result.success) {
        setError(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å–ø—Ä–∞–π—Ç–∞.');
      } else {
        setError(null);
      }
    } catch (err) {
      setError('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–ø—Ä–∞–π—Ç.');
    } finally {
      setProcessing(null);
    }
  }, [user, initData, telegramId, equipMutation]);

  // Prefetch –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const prefetchPages = useCallback(() => {
    queryClient.prefetchQuery({
      queryKey: ['user', telegramId],
      queryFn: () => api.getUserData(telegramId, initData),
    });
  }, [telegramId, initData, queryClient]);

  const isLoading = userLoading || spritesLoading || ownedLoading;

  if (isLoading) {
    return <Loader />;
  }

  const coins = userData?.data?.coins || 0;
  const currentSprite = userData?.data?.current_sprite_id || null;
  const spriteList = sprites?.data || [];
  const ownedList = ownedSprites?.data || [];

  return (
    <div className="container">
      <div className="scrollable-content">
        <div className="header">
          <h2>–ú–∞–≥–∞–∑–∏–Ω —Å–ø—Ä–∞–π—Ç–æ–≤</h2>
          <div className="coins-display">–ú–æ–Ω–µ—Ç—ã: {coins}</div>
        </div>

        {error && <div className="error">{error}</div>}

        {!telegramId ? (
          <div className="error">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
          </div>
        ) : spriteList.length === 0 ? (
          <div className="info">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤.</div>
        ) : (
          <div className="sprites-grid">
            {spriteList.map((sprite) => (
              <SpriteCard
                key={sprite.id}
                sprite={sprite}
                isOwned={ownedList.includes(sprite.id)}
                isEquipped={currentSprite === sprite.id}
                isProcessing={processing === sprite.id}
                coins={coins}
                onPurchase={handlePurchase}
                onEquip={handleEquip}
              />
            ))}
          </div>
        )}
      </div>

      <div className="menu">
        <Link href="/" passHref>
          <button className="menu-btn">üìä</button>
        </Link>
        <Link href="/friends" passHref>
          <button className="menu-btn">üìà</button>
        </Link>
        <Link 
          href="/shop" 
          passHref
          onMouseEnter={prefetchPages}
        >
          <button className="menu-btn active">üõçÔ∏è</button>
        </Link>
        <Link href="/reference" passHref>
          <button className={`menu-btn ${router.pathname === '/reference' ? 'active' : ''}`}>‚ÑπÔ∏è</button>
        </Link>
      </div>
    </div>
  );
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ø—Ä–∞–π—Ç–∞
const SpriteCard = React.memo(({
  sprite,
  isOwned,
  isEquipped,
  isProcessing,
  coins,
  onPurchase,
  onEquip
}: {
  sprite: Sprite;
  isOwned: boolean;
  isEquipped: boolean;
  isProcessing: boolean;
  coins: number;
  onPurchase: (id: number) => void;
  onEquip: (id: number) => void;
}) => (
  <div className="sprite-card">
    <img
      src={sprite.image_url}
      alt={sprite.name}
      className="sprite-image"
      onError={(e) =>
        (e.currentTarget.src =
          'https://via.placeholder.com/150?text=No+Image')
      }
    />
    <div className="sprite-info">
      <h3>{sprite.name}</h3>
      <div className="sprite-price">
        –¶–µ–Ω–∞:{' '}
        {sprite.price > 0 ? `${sprite.price} –º–æ–Ω–µ—Ç` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
      </div>
      <div className="sprite-actions">
        {!isOwned ? (
          coins >= sprite.price ? (
            <button
              className={`buy-btn ${isProcessing ? 'processing' : ''}`}
              onClick={() => !isProcessing && onPurchase(sprite.id)}
              disabled={isProcessing}
            >
              {isProcessing ? (
                <span className="button-loader">‚è≥</span>
              ) : (
                '–ö—É–ø–∏—Ç—å'
              )}
            </button>
          ) : (
            <button className="buy-btn disabled" disabled>
              –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            </button>
          )
        ) : (
          <button
            className={`equip-btn ${isEquipped ? 'equipped' : ''} ${isProcessing ? 'processing' : ''}`}
            onClick={() => !isProcessing && onEquip(sprite.id)}
            disabled={isProcessing || isEquipped}
          >
            {isProcessing ? (
              <span className="button-loader">‚è≥</span>
            ) : isEquipped ? (
              '–ü—Ä–∏–º–µ–Ω—ë–Ω'
            ) : (
              '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'
            )}
          </button>
        )}
      </div>
    </div>
  </div>
));
