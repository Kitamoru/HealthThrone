import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useTelegram } from '../hooks/useTelegram';
import { Loader } from '../components/Loader';
import { api } from '../lib/api';
import { Sprite, ShopUserProfile } from '../lib/types';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω —Å–ø—Ä–∞–π—Ç–æ–≤
export default function Shop() {
  const router = useRouter();
  const { user, isReady, initData } = useTelegram(); // Telegram Web App Data
  const [sprites, setSprites] = useState<Sprite[]>([]);
  const [loading, setLoading] = useState(true);
  const [coins, setCoins] = useState(0);
  const [currentSprite, setCurrentSprite] = useState<number | null>(null);
  const [ownedSprites, setOwnedSprites] = useState<number[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [purchasingId, setPurchasingId] = useState<number | null>(null);
  const [equippingId, setEquippingId] = useState<number | null>(null);

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–ø—É—Å—Ç—è 3 —Å–µ–∫—É–Ω–¥—ã
   */
 useEffect(() => {
-   let timer;
+   let timer: NodeJS.Timeout | undefined;
    if (error) {
      timer = setTimeout(() => setError(null), 3000);
    }
    return () => {
      clearTimeout(timer);
    };
}, [error]);

  /**
   * –§–µ—Ç—á–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  useEffect(() => {
    if (!isReady || !user?.id || !initData) return;
    
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResponse = await api.getUserData(Number(user.id), initData);
        if (userResponse.success && userResponse.data) {
          setCoins(userResponse.data.coins);
          setCurrentSprite(userResponse.data.current_sprite_id || null);
        } else if (userResponse.error) {
          setError(userResponse.error);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤
        const spritesResponse = await api.getSprites(initData);
        if (spritesResponse.success && Array.isArray(spritesResponse.data)) {
          setSprites(spritesResponse.data);
        } else if (spritesResponse.error) {
          setError(spritesResponse.error);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–π—Ç–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const ownedResponse = await api.getOwnedSprites(Number(user.id), initData);
        if (ownedResponse.success && Array.isArray(ownedResponse.data)) {
          setOwnedSprites(ownedResponse.data);
        } else if (ownedResponse.error) {
          setError(ownedResponse.error);
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ —Ñ–µ—Ç—á–∏–Ω–≥–∞:", err);
        setError('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [isReady, user, initData]);

  /**
   * –ü–æ–∫—É–ø–∫–∞ —Å–ø—Ä–∞–π—Ç–∞
   */
  const handlePurchase = async (spriteId: number) => {
    if (!user?.id || !initData) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    if (ownedSprites.includes(spriteId)) {
      setError('–í—ã —É–∂–µ –≤–ª–∞–¥–µ–µ—Ç–µ —ç—Ç–∏–º —Å–ø—Ä–∞–π—Ç–æ–º!');
      return;
    }

    const sprite = sprites.find((s) => s.id === spriteId);
    if (!sprite) {
      setError('–°–ø—Ä–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (coins < sprite.price) {
      setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏');
      return;
    }

    try {
      setPurchasingId(spriteId);
      const purchaseResponse = await api.purchaseSprite(Number(user.id), spriteId, initData);

      if (purchaseResponse.success) {
        setOwnedSprites([...ownedSprites, spriteId]);
        setCoins(purchaseResponse.newCoins); // –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        setError(null);
      } else {
        setError(purchaseResponse.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setPurchasingId(null);
    }
  };

  /**
   * –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ —Å–ø—Ä–∞–π—Ç–∞
   */
  const handleEquip = async (spriteId: number) => {
    if (!user?.id || !initData) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    try {
      setEquippingId(spriteId);
      const equipResponse = await api.equipSprite(Number(user.id), spriteId, initData);

      if (equipResponse.success) {
        setCurrentSprite(equipResponse.currentSprite); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–∞–π—Ç
        setError(null);
      } else {
        setError(equipResponse.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å–ø—Ä–∞–π—Ç–∞');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setEquippingId(null);
    }
  };

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="container">
      <div className="scrollable-content">
        <div className="header">
          <h2>–ú–∞–≥–∞–∑–∏–Ω —Å–ø—Ä–∞–π—Ç–æ–≤</h2>
          <div className="coins-display">–ú–æ–Ω–µ—Ç—ã: {coins}</div>
        </div>
        
        {error && <div className="error">{error}</div>}

        {!user?.id ? (
          <div className="error">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
          </div>
        ) : sprites.length === 0 ? (
          <div className="info">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤.</div>
        ) : (
          <div className="sprites-grid">
            {sprites.map((sprite) => {
              const isOwned = ownedSprites.includes(sprite.id);
              const isEquipped = currentSprite === sprite.id;
              const isPurchasing = purchasingId === sprite.id;
              const isEquipping = equippingId === sprite.id;

              return (
                <div key={sprite.id} className="sprite-card">
                  <img
                    src={sprite.image_url}
                    alt={sprite.name}
                    className="sprite-image"
                    onError={(e) =>
                      (e.currentTarget.src =
                        'https://via.placeholder.com/150?text=No+Image')}
                  />
                  <div className="sprite-info">
                    <h3>{sprite.name}</h3>
                    <div className="sprite-price">
                      –¶–µ–Ω–∞:{' '}
                      {sprite.price > 0 ? `${sprite.price} –º–æ–Ω–µ—Ç` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
                    </div>
                    
                    <div className="sprite-actions">
                      {!isOwned ? (
                        coins >= sprite.price ? (
                          <button
                            className={`buy-btn ${isPurchasing ? 'loading' : ''}`}
                            onClick={() => handlePurchase(sprite.id)}
                            disabled={isPurchasing}
                          >
                            {isPurchasing ? '–ü–æ–∫—É–ø–∫–∞...' : '–ö—É–ø–∏—Ç—å'}
                          </button>
                        ) : (
                          <button className="buy-btn disabled" disabled>
                            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                          </button>
                        )
                      ) : (
                        <button
                          className={`equip-btn ${isEquipped ? 'equipped' : ''}`}
                          onClick={() => handleEquip(sprite.id)}
                          disabled={isEquipped || isEquipping}
                        >
                          {isEquipping 
                            ? '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ...'
                            : isEquipped 
                              ? '–ü—Ä–∏–º–µ–Ω—ë–Ω'
                              : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é */}
      <div className="menu">
        <Link href="/" passHref>
          <button className="menu-btn">üìä</button>
        </Link>
        <Link href="/friends" passHref>
          <button className="menu-btn">üìà</button>
        </Link>
        <Link href="/shop" passHref>
          <button className="menu-btn active">üõçÔ∏è</button>
        </Link>
        <Link href="/info" passHref>
          <button className="menu-btn">‚ÑπÔ∏è</button>
        </Link>
      </div>
    </div>
  );
}
